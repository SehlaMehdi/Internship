                                                             Assignment-4
In Python, a virtual environment is like a private workspace for each of your projects. It lets you install and manage libraries separately from other projects, keeping everything organized and avoiding conflicts between different versions of libraries. This helps ensure that your projects remain stable and can easily be shared or moved to different computers without issues.

•  Dependency Isolation:
•	Different data science projects often require different versions of libraries like NumPy, Pandas, or TensorFlow.
•	Virtual environments isolate these dependencies so that each project can have its own set of libraries without conflicts.
•  Reproducibility:
•	Data science involves complex analyses that depend on specific versions of libraries and data preprocessing steps.
•	Virtual environments ensure that the exact environment used for development can be recreated, allowing others to reproduce your results reliably.
•  Experimentation and Testing:
•	Data scientists frequently experiment with different algorithms, models, or data transformations.
•	Virtual environments provide a safe space to test new ideas without affecting other projects or risking stability.
•  Collaboration:
•	Teams working on data science projects need consistency in library versions and configurations.
•	Virtual environments help maintain consistency across team members, making collaboration easier and reducing compatibility issues.
•  Deployment:
•	When deploying data science models or applications, it's crucial to know and control the environment in which they will run.
•	Virtual environments simplify deployment by clearly defining the required dependencies and configurations.
•  Conflict Management:
•	Without virtual environments, installing or updating libraries globally can lead to conflicts between different projects or system-level dependencies.
•	Virtual environments prevent such conflicts by keeping dependencies isolated within each project.


To create Virtual Environment named "ml_env" using the venv module

Step 1: Create and activate the virtual environment:

Open a terminal or command prompt and execute the following commands:
For Windows:
# Create virtual environment named ml_env
python -m venv ml_env

# Activate the virtual environment
ml_env\Scripts\activate

Step 2: Install NumPy in the virtual environment:
While the virtual environment is active (ml_env), install NumPy:

pip install numpy

Step 3: Write a Python script using NumPy:
Finding Inner Product of two vectors using Numpy Library

import numpy as np
A=np.array ([2,1,5,4])
B=np.array([3,4,7,8])
output=np.dot(A,B)
print(output)

Step 4: Run the Python script:
Output= 77
